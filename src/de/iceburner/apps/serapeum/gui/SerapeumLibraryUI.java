package de.iceburner.apps.serapeum.gui;

import de.iceburner.apps.serapeum.lib.Library;
import de.iceburner.apps.serapeum.lib.LibraryItem;
import de.iceburner.apps.serapeum.lib.LibraryItemFactory;
import de.iceburner.apps.serapeum.lib.Person;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.JOptionPane;

/**
 * main GUI class
 *
 * <p>
 * <b>Copyright:</b> Copyright (c) 2015
 * </p>
 * <p>
 * <b>Company</b> Iceburner
 * </p>
 *
 * @author ethssce - 2015-01-04 - Initial version
 */
public class SerapeumLibraryUI extends javax.swing.JFrame {
    
    private Library mLibrary;
    private static final String PLEASE_ENTER = "Please enter %s here";
    private static final String INVALID_NAME = "Invalid name!";
    private static final String INIT_STRING_PERSON_LIST = "Please add a person";
    private static final String INIT_STRING_LIBRARY_LIST = "This library is empty, please add an item!";
    private static final String NOT_SUPPORTED_MESSAGE = "Not fully supported yet.";

    private boolean isTextFieldSet(String text) {
        if(text.contains(PLEASE_ENTER.substring(0, 10))||text.equals("")){
            return false;
        }
        return true;
    }
    
    private enum Action{
        ADD("add"), DELETE("delete");
        private String value;
        
        private Action(String value){
            this.value = value;
        }
        
        @Override
        public String toString(){
            return this.value;
        }
    }
    
    private enum Object{
        ITEM("item"), PERSON("person");
        private String value;
        
        private Object(String value){
            this.value = value;
        }
        
        @Override
        public String toString(){
            return this.value;
        }
    }
    
    private enum Item{
        BOOK("book"), MOVIE("movie"), OTHER("other");
        private String value;
        
        private Item(String value){
            this.value = value;
        }
        
        @Override
        public String toString(){
            return this.value;
        }
    }
        

    /**
     * Creates new form SerapeumLibraryUI
     */
    public SerapeumLibraryUI() {
        itemModel.addElement("Welcome to the Serapeum Library!");
        itemModel.addElement("Please select new or open from the menu to start!");
        personModel.addElement("");
        adminActionModel.addElement(Action.ADD);
        adminActionModel.addElement(Action.DELETE);
        adminObjectModel.addElement(Object.ITEM);
        adminObjectModel.addElement(Object.PERSON);
        adminItemModel.addElement(Item.BOOK);
        adminItemModel.addElement(Item.MOVIE);
        adminItemModel.addElement(Item.OTHER);
        initComponents();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        libraryOverviewPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        libraryOverviewList = new javax.swing.JList();
        updateViewButton = new javax.swing.JButton();
        checkOutInButton = new javax.swing.JButton();
        viewComboBox = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        personOverviewList = new javax.swing.JList();
        libraryAdministrationPanel = new javax.swing.JPanel();
        actionComboBox = new javax.swing.JComboBox();
        objectComboBox = new javax.swing.JComboBox();
        itemComboBox = new javax.swing.JComboBox();
        nameTextField = new javax.swing.JTextField();
        info1TextField = new javax.swing.JTextField();
        info2TextField = new javax.swing.JTextField();
        performActionButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        libraryOverviewPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Library Overview", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        libraryOverviewList.setBorder(javax.swing.BorderFactory.createTitledBorder("library items"));
        libraryOverviewList.setModel(itemModel);
        libraryOverviewList.setEnabled(false);
        jScrollPane1.setViewportView(libraryOverviewList);

        updateViewButton.setText("update view");
        updateViewButton.setEnabled(false);
        updateViewButton.setName(""); // NOI18N
        updateViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateViewButtonActionPerformed(evt);
            }
        });

        checkOutInButton.setText("check-out / return");
        checkOutInButton.setEnabled(false);
        checkOutInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutInButtonActionPerformed(evt);
            }
        });

        viewComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "show all items in library", "show only available items in library", "show unavailable items in library", "show items of person" }));
        viewComboBox.setEnabled(false);
        viewComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewComboBoxActionPerformed(evt);
            }
        });

        personOverviewList.setBorder(javax.swing.BorderFactory.createTitledBorder("persons"));
        personOverviewList.setModel(personModel);
        personOverviewList.setEnabled(false);
        jScrollPane2.setViewportView(personOverviewList);

        javax.swing.GroupLayout libraryOverviewPanelLayout = new javax.swing.GroupLayout(libraryOverviewPanel);
        libraryOverviewPanel.setLayout(libraryOverviewPanelLayout);
        libraryOverviewPanelLayout.setHorizontalGroup(
            libraryOverviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(libraryOverviewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(libraryOverviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(libraryOverviewPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(libraryOverviewPanelLayout.createSequentialGroup()
                        .addComponent(updateViewButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkOutInButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewComboBox, 0, 442, Short.MAX_VALUE))))
        );
        libraryOverviewPanelLayout.setVerticalGroup(
            libraryOverviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(libraryOverviewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(libraryOverviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(libraryOverviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateViewButton)
                    .addComponent(checkOutInButton)
                    .addComponent(viewComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        libraryAdministrationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Library Administration", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        actionComboBox.setModel(adminActionModel);
        actionComboBox.setEnabled(false);
        actionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionComboBoxActionPerformed(evt);
            }
        });

        objectComboBox.setModel(adminObjectModel);
        objectComboBox.setEnabled(false);
        objectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectComboBoxActionPerformed(evt);
            }
        });

        itemComboBox.setModel(adminItemModel);
        itemComboBox.setEnabled(false);
        itemComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemComboBoxActionPerformed(evt);
            }
        });

        nameTextField.setText("Please enter name here");
        nameTextField.setEnabled(false);

        info1TextField.setText("Please enter additional information here");
        info1TextField.setEnabled(false);
        info1TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                info1TextFieldActionPerformed(evt);
            }
        });

        info2TextField.setText("Please enter additional information here");
        info2TextField.setEnabled(false);

        performActionButton.setText("execute chosen action");
        performActionButton.setEnabled(false);
        performActionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performActionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout libraryAdministrationPanelLayout = new javax.swing.GroupLayout(libraryAdministrationPanel);
        libraryAdministrationPanel.setLayout(libraryAdministrationPanelLayout);
        libraryAdministrationPanelLayout.setHorizontalGroup(
            libraryAdministrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(libraryAdministrationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(libraryAdministrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, libraryAdministrationPanelLayout.createSequentialGroup()
                        .addComponent(actionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(objectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(itemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(performActionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(info1TextField)
                    .addComponent(info2TextField)
                    .addComponent(nameTextField))
                .addContainerGap())
        );
        libraryAdministrationPanelLayout.setVerticalGroup(
            libraryAdministrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(libraryAdministrationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(libraryAdministrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(actionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(objectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(performActionButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(info1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(info2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        newMenuItem.setText("New");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(libraryOverviewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(libraryAdministrationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(libraryOverviewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(libraryAdministrationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        mLibrary = new Library();
        enableGuiElements();
        itemModel.removeAllElements();
        itemModel.addElement(INIT_STRING_LIBRARY_LIST);
        personModel.removeAllElements();
        personModel.addElement(INIT_STRING_PERSON_LIST);
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        errorBox(NOT_SUPPORTED_MESSAGE, NOT_SUPPORTED_MESSAGE);
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void info1TextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_info1TextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_info1TextFieldActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        enableGuiElements();
        errorBox(NOT_SUPPORTED_MESSAGE, NOT_SUPPORTED_MESSAGE);
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        errorBox(NOT_SUPPORTED_MESSAGE, NOT_SUPPORTED_MESSAGE);
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void objectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectComboBoxActionPerformed
        if (actionComboBox.getSelectedItem().equals(Action.DELETE)){
            itemComboBox.setEnabled(false);
            setInfoTextBoxes("item or person ID", "nothing", "nothing");
        } else {
            if (objectComboBox.getSelectedItem().equals(Object.ITEM)){
                itemComboBox.setEnabled(true);
                itemComboBoxAction();
            } else if (objectComboBox.getSelectedItem().equals(Object.PERSON)){
                itemComboBox.setEnabled(false);
                setInfoTextBoxes("full name", "email", "phone number");
            }
        }
    }//GEN-LAST:event_objectComboBoxActionPerformed

    private void itemComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemComboBoxActionPerformed
        itemComboBoxAction();
    }//GEN-LAST:event_itemComboBoxActionPerformed

    private void actionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionComboBoxActionPerformed
        if (actionComboBox.getSelectedItem().equals(Action.ADD)){
            objectComboBox.setEnabled(true);
            objectComboBoxActionPerformed(evt);
        } else if (actionComboBox.getSelectedItem().equals(Action.DELETE)){
            objectComboBox.setEnabled(true);
            itemComboBox.setEnabled(false);
            setInfoTextBoxes("item or person ID", "nothing", "nothing");
        }
    }//GEN-LAST:event_actionComboBoxActionPerformed

    private void performActionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_performActionButtonActionPerformed
        switch((Action)actionComboBox.getSelectedItem()){
            case ADD:
                switch((Object)objectComboBox.getSelectedItem()){
                    case ITEM:
                        if (isTextFieldSet(nameTextField.getText())){
                            LibraryItem libItem = null;
                            String info = info1TextField.getText();
                            if (!isTextFieldSet(info)){
                                info = "";
                            }
                            switch ((Item) itemComboBox.getSelectedItem()) {
                                case BOOK:
                                    libItem = LibraryItemFactory.createItem(nameTextField.getText(), info, LibraryItemFactory.ItemType.BOOK);
                                    if(isTextFieldSet(info2TextField.getText())){
                                        libItem.setDescription(info2TextField.getText());
                                    }
                                    break;
                                case MOVIE:
                                    libItem = LibraryItemFactory.createItem(nameTextField.getText(), info, LibraryItemFactory.ItemType.MOVIE);
                                    if(isTextFieldSet(info2TextField.getText())){
                                        libItem.setDescription(info2TextField.getText());
                                    }
                                    break;
                                case OTHER:
                                    if(isTextFieldSet(info2TextField.getText())){
                                        info = info + info2TextField.getText();
                                    }
                                    libItem = LibraryItemFactory.createItem(nameTextField.getText(), info, LibraryItemFactory.ItemType.OTHER);
                                    break;
                            }
                            mLibrary.addItem(libItem);
                            if (itemModel.get(0).contains(INIT_STRING_LIBRARY_LIST)){
                                itemModel.removeAllElements();
                            }
                            itemModel.addElement(libItem.toString());
                        }else {
                            infoBox(INVALID_NAME,INVALID_NAME);
                        }
                        break;
                    case PERSON:
                        if (isTextFieldSet(nameTextField.getText())){
                            Person person = new Person(nameTextField.getText());
                            if (isTextFieldSet(info1TextField.getText())) {
                                person.setMail(info1TextField.getText());
                            }
                            if (isTextFieldSet(info2TextField.getText())) {
                                person.setPhone(info2TextField.getText());
                            }
                            mLibrary.addPerson(person);
                            if (personModel.get(0).contains(INIT_STRING_PERSON_LIST)){
                                personModel.removeAllElements();
                            }
                            personModel.addElement(person.toString());
                        } else {
                            infoBox(INVALID_NAME,INVALID_NAME);
                        }
                        break;
                }
                break;
            case DELETE:
                errorBox(NOT_SUPPORTED_MESSAGE, NOT_SUPPORTED_MESSAGE);
        }
    }//GEN-LAST:event_performActionButtonActionPerformed

    private void updateViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateViewButtonActionPerformed
        errorBox(NOT_SUPPORTED_MESSAGE, NOT_SUPPORTED_MESSAGE);
    }//GEN-LAST:event_updateViewButtonActionPerformed

    private void checkOutInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutInButtonActionPerformed
        errorBox(NOT_SUPPORTED_MESSAGE, NOT_SUPPORTED_MESSAGE);
    }//GEN-LAST:event_checkOutInButtonActionPerformed

    private void viewComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewComboBoxActionPerformed
        errorBox(NOT_SUPPORTED_MESSAGE, NOT_SUPPORTED_MESSAGE);
    }//GEN-LAST:event_viewComboBoxActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SerapeumLibraryUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SerapeumLibraryUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SerapeumLibraryUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SerapeumLibraryUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SerapeumLibraryUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JComboBox actionComboBox;
    private javax.swing.JButton checkOutInButton;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JTextField info1TextField;
    private javax.swing.JTextField info2TextField;
    private javax.swing.JComboBox itemComboBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel libraryAdministrationPanel;
    private javax.swing.JList libraryOverviewList;
    private javax.swing.JPanel libraryOverviewPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JComboBox objectComboBox;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JButton performActionButton;
    private javax.swing.JList personOverviewList;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton updateViewButton;
    private javax.swing.JComboBox viewComboBox;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel<String> itemModel = new DefaultListModel<String>();
    private DefaultListModel<String> personModel = new DefaultListModel<String>();
    private DefaultComboBoxModel<Action> adminActionModel = new DefaultComboBoxModel<Action>();
    private DefaultComboBoxModel<Object> adminObjectModel = new DefaultComboBoxModel<Object>();
    private DefaultComboBoxModel<Item> adminItemModel = new DefaultComboBoxModel<Item>();
    
    private void enableGuiElements() {
        libraryOverviewList.setEnabled(true);
        personOverviewList.setEnabled(true);
        updateViewButton.setEnabled(true);
        checkOutInButton.setEnabled(true);
        viewComboBox.setEnabled(true);
        actionComboBox.setEnabled(true);
        objectComboBox.setEnabled(true);
        itemComboBox.setEnabled(true);
        nameTextField.setEnabled(true);
        info1TextField.setEnabled(true);
        info2TextField.setEnabled(true);
        performActionButton.setEnabled(true);
    }

    private void itemComboBoxAction() {
        if (itemComboBox.getSelectedItem().equals(Item.BOOK)){
            setInfoTextBoxes("book name","author","description");
        }
        if (itemComboBox.getSelectedItem().equals(Item.MOVIE)){
            setInfoTextBoxes("movie name","year","description");
        }
        if (itemComboBox.getSelectedItem().equals(Item.OTHER)){
            setInfoTextBoxes("item name","description","dven more description");
        }
        
    }

    private void setInfoTextBoxes(String name, String info1, String info2) {
        nameTextField.setText(String.format(PLEASE_ENTER,name));
        info1TextField.setText(String.format(PLEASE_ENTER,info1));
        info2TextField.setText(String.format(PLEASE_ENTER,info2));
    }

    private static void infoBox(String infoMessage, String titleBar)
    {
        JOptionPane.showMessageDialog(null, infoMessage, "InfoBox: " + titleBar, JOptionPane.INFORMATION_MESSAGE);
    }
    
    private static void errorBox(String errorMessage, String titleBar)
    {
        JOptionPane.showMessageDialog(null, errorMessage, "ErrorBox: " + titleBar, JOptionPane.ERROR_MESSAGE);
    }
    
}
